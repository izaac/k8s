# This is a basic workflow to help you get started with Actions

name: lab-k8s-single-node-aws

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  # push:
  #   branches: [ master ]
  # pull_request:
  #   branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  single-node:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Runs a single command using the runners shell
      - name: Download Terraform
        run: |
              curl -sL https://releases.hashicorp.com/terraform/0.14.8/terraform_0.14.8_linux_amd64.zip -o tf.zip
              unzip tf.zip
              cp terraform lab/single-node/terraform/

      # - name: show path dir
      #   run: pwd

      # - name: list files
      #   run: ls -l
      
      # - name: cat pem file
      #   env:
      #     TF_VAR_AWS_KEY_SSH: ${{ secrets.AWS_KEY_SSH }}
      #   run: |
      #         echo $TF_VAR_AWS_KEY_SSH

      - name: terraform-init
        env:
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
              cd lab/single-node/terraform
              ./terraform init -backend-config="access_key=$(echo $TF_VAR_AWS_ACCESS_KEY_ID)" -backend-config="secret_key=$(echo $TF_VAR_AWS_SECRET_ACCESS_KEY)"
        
      - name: terraform-plan
        env:
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_AWS_KEY_SSH: ${{ secrets.AWS_KEY_SSH }}
        run: |
              cd lab/single-node/terraform
              ./terraform plan 

      - name: terraform-apply
        env:
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_AWS_KEY_SSH: ${{ secrets.AWS_KEY_SSH }}
        run: |
              # echo $TF_VAR_AWS_KEY_SSH > lab/single-node/terraform/file.pem
              # chmod 600 lab/single-node/terraform/file.pem
              cd lab/single-node/terraform
              ./terraform apply -auto-approve
              ./terraform output opensuse_ip > ../../../k8slab_ip.out
              cat ../../../k8slab_ip.out
      
      - name: ansible-playbook
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
              sleep 30
              pwd
              head -2 k8slab_ip.out | tail -1 > k8slab_ip_node1.out 
              sed -i 's/\"//g' k8slab_ip_node1.out
              sed -i 's/,//g' k8slab_ip_node1.out
              sed -i 's/^[ \t]*//g' k8slab_ip_node1.out
              mkdir ~/.aws
              echo "[default]" > ~/.aws/config
              echo "region = us-east-1" >> ~/.aws/config
              echo "output = json" >> ~/.aws/config
              echo "[default]" > ~/.aws/credentials
              echo "aws_access_key_id = $(echo $AWS_ACCESS_KEY)" >> ~/.aws/credentials
              echo "aws_secret_access_key = $(echo $AWS_SECRET_ACCESS_KEY)" >> ~/.aws/credentials
              aws s3 cp s3://labk8ssshkey/leoaws.pem ./
              chmod 600 leoaws.pem
              export PUBLIC_IP=$(cat k8slab_ip_node1.out)
              envsubst < lab/single-node/ansible/roles/k8s/files/rkeconfig.yml > lab/single-node/ansible/roles/k8s/files/config.yml
              ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i $PUBLIC_IP, --private-key ./leoaws.pem lab/single-node/ansible/k8s.yaml
