---
- name: dnf update
  dnf: 
    name: "*"
    state: latest
    
# - name: Def CRI-O modules and sysctl
#   shell: |
#     cat <<EOF | sudo tee /etc/modules-load.d/crio.conf
#     overlay
#     br_netfilter
#     EOF
#     sudo modprobe overlay
#     sudo modprobe br_netfilter
#     cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
#     net.bridge.bridge-nf-call-iptables  = 1
#     net.ipv4.ip_forward                 = 1
#     net.bridge.bridge-nf-call-ip6tables = 1
#     EOF
#     sudo sysctl --system

# - name: copy Def CRI-O modules 
#   copy:
#     src: files/crio.conf
#     dest: /etc/modules-load.d/crio.conf
#     owner: root
#     group: root
#     mode: '0644'

- name: add overlay module
  modprobe:
    name: overlay
    state: present

- name: add br_netfilter module
  modprobe:
    name: br_netfilter
    state: present

# - name: copy sysctl kubernetes-crio.conf modules 
#   copy:
#     src: files/99-kubernetes-cri.conf
#     dest: /etc/sysctl.d/99-kubernetes-cri.conf
#     owner: root
#     group: root
#     mode: '0644'

- name: set net.bridge.bridge-nf-call-iptables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: '1'
    state: present
    reload: yes

- name: set net.ipv4.ip_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes

- name: set net.bridge.bridge-nf-call-ip6tables
  sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: '1'
    state: present
    reload: yes

- name: disable SELINUX
  lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: SELINUX=disabled

- name: copy k8s repo
  copy:
    src: files/kubernetes.repo
    dest: /etc/yum.repos.d/kubernetes.repo
    owner: root
    group: root
    mode: '0644'

# - name: sysctl reload
#   shell: |
#     sudo sysctl --system

- name: dnf def module cri-o version
  shell: |
    export VERSION=1.20
    sudo dnf -y module enable cri-o:$VERSION

- name: dnf install cri-o 
  shell: |
    export VERSION=1.20
    sudo dnf -y install cri-o

- name: Changing CRIO conmon_cgroup crio.conf
  lineinfile:
    path: /etc/crio/crio.conf
    regexp: '^conmon_cgrou ='
    line: conmon_cgroup = "pod"

- name: Changing CRIO cgroup crio.conf
  lineinfile:
    path: /etc/crio/crio.conf
    regexp: '^cgroup_manager ='
    line: cgroup_manager = "cgroupfs"

- name: systemctl CRIO reload and restart
  systemd:
    name: crio
    daemon_reload: yes
    state: restarted
    enabled: yes

- name: Install k8s kubelet
  dnf:
    name: kubelet-1.20.5-0.x86_64
    state: present
    exclude: kubernetes

- name: Install k8s kubeadm
  dnf:
    name: kubeadm-1.20.5-0.x86_64
    state: present
    exclude: kubernetes

- name: Install k8s kubectl
  dnf:
    name: kubectl-1.20.5-0.x86_64
    state: present
    exclude: kubernetes

# kubeadm-1.20.5-0.x86_64 kubectl-1.20.5-0.x86_64 --disableexcludes=kubernetes

    # sudo systemctl enable --now kubelet

# - name: add systemd.unified_cgroup_hierarchy=0 line to /etc/default/grub 
#   register: kernel_result
#   shell: |
#     cat<<EOF| sudo bash
#     grep "systemd.unified_cgroup_hierarchy=0" /etc/default/grub
#     if [ $? -eq 1 ]     
#     then                                                                       
#     sudo grubby --update-kernel=ALL --args="systemd.unified_cgroup_hierarchy=0"
#     fi
#     EOF

# - name: Reboot if kernel modified
#   when: kernel_result is changed
#   async: 1
#   poll: 0
#   shell: |
#     sleep 5 && sudo reboot

# - name: Wait for the reboot to complete if there was a change.
#   when: kernel_result is changed
#   wait_for_connection:
#     connect_timeout: 20
#     sleep: 5
#     delay: 5
#     timeout: 300

# - name: kubeadm init
#   shell: |
#     sudo kubeadm init

# - name: copy k8s config to user fedora
#   shell: |
#     sudo mkdir /home/fedora/.kube
#     sudo cp /etc/kubernetes/admin.conf /home/fedora/.kube/config
#     sudo chown -R fedora: /home/fedora/.kube

# - name: untaint master node
#   shell: |
#     kubectl taint node $(kubectl get node -o=jsonpath='{.items[0].metadata.name}') node-role.kubernetes.io/master:NoSchedule-

# - name: install weavenet network plugin
#   shell: |
#     kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

# - name: install argoCD
# kubectl create namespace argocd
# kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
